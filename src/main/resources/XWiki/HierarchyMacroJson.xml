<?xml version="1.0" encoding="UTF-8"?>
<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc>
  <web>XWiki</web>
  <name>HierarchyMacroJson</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>XWiki.WikiMacros</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1400144203000</creationDate>
  <date>1401271593000</date>
  <contentUpdateDate>1401271589000</contentUpdateDate>
  <version>1.1</version>
  <title>HierarchyMacroJson</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>{{velocity}}
{{html clean="false" wiki="true"}}
$response.setContentType("Content-type: application/json")
## Macro to display title
#macro(getTitleToDisplay $documentSource)
  #if("$!displayValue" == "displayTitle")
    #set($titleToDisplay = "$documentSource.displayTitle")
  #elseif("$!displayValue" == "name")
    #set($titleToDisplay = "$documentSource.name")
  #elseif("$!displayValue" == "title")
    #set($titleToDisplay = "$documentSource.title")
  #else
    #set($titleToDisplay = "$documentSource.fullName")
  #end
#end

#macro(checkHasChild $document)

  #if($closeNodeList.contains($document))
    #set($hasChild = 0)
  #else
    #set($query = $services.query.xwql("select doc.fullName from XWikiDocument doc $!{classFrom} where doc.parent = :parent $!{queryHidden} $!{classFilter} order by doc.name").bindValue("parent", $document).execute())
    #if($checkRight)
      #set($docsCanView = [])
      #foreach($item in $query)
        #if($xwiki.hasAccessLevel('view', $xcontext.user, $item))
          #set($discard = $docsCanView.add($item))
        #end
      #end
      #set($hasChild = $docsCanView.size() &gt; 0)
    #else
      #set($hasChild = $query.size() &gt; 0)
    #end
  #end
#end

#macro(getResults $level $queryParam)
  #set($selectFrom = "select doc.fullName from XWikiDocument doc $!{classFrom}")
  #if($level=="root")
    #set($query = $services.query.xwql("${selectFrom} where ( doc.parent = '' or doc.parent = :parent ) and doc.space = :space and doc.name&lt;&gt;'WebHome' $!{docLanguageWhere} $!{classFilter} $!{excludesWhere} $!{queryHidden} order by doc.name").bindValue("parent", "${queryParam}.WebHome").bindValue("space", "${queryParam}"))
  #else
    #set($query = $services.query.xwql("${selectFrom} where doc.parent = :parent $!{docLanguageWhere} $!{excludesWhere} $!{classFilter} $!{queryHidden} order by doc.name").bindValue("parent", $queryParam) )
  #end
  #if($docLanguage != '')
    #set($query = $query.bindValue("language", $docLanguage))
  #end
  #if($excludes != '')
    #foreach($excludeItem in $excludeList)
      #set($query = $query.bindValue("exclude${velocityCount}", $excludeItem) )
    #end
  #end
  #set($results = $query.execute())
#end

## getChilds macro use when openNode is set
#macro(getChilds $document)
  #getResults("child",$document)
  #if($results.size() &gt; 0 &amp;&amp; !$closeNodeList.contains($document))
    , 
    "state": { "opened" : true },
    "children": [
      #foreach($name in $results)
        #set($titleToDisplay = "")
        #set($currDocReference = $services.model.resolveDocument($name))
        #set($currDoc = $xwiki.getDocument($currDocReference))        
        #getTitleToDisplay($currDoc)
        #set($urlDoc = "$currDoc.getURL('view')")
        #if($velocityCount &gt; 1) , #end
        {
          ## "id":"$!{name}", 
          "id": "id$!{currDoc.id}",
          "text": $jsontool.serialize($!{titleToDisplay}), 
          #if($checkChilds)
            #checkHasChild($name)
            "children": $hasChild,
          #else
            "children": true, 
          #end 
          "data": "${urlDoc}",
          "a_attr" : {"href":"${urlDoc}"}
          #if($pathToRootNode.contains($name)) 
          ,
           "state": {
            "opened" : true
            #if("$name"=="$openNode"), "selected": true #end
            }          
            #getChilds($name)             
          #elseif("$name"=="$openNode")
          ,
           "state": {
            "opened" : true,
            "selected": true
            }            
          #end
        }
      #end
    ]
  #end
#end

#macro(displayNode $document)
  #if($velocityCount &gt; 1) , #end
  #set($titleToDisplay = "")
  #set($currDocReference = $services.model.resolveDocument($document))
  #set($currDoc = $xwiki.getDocument($currDocReference))
  #getTitleToDisplay($currDoc)
  #set($urlDoc = "$currDoc.getURL('view')")
  
  {
    "id": "id$!{currDoc.id}", 
    "text": $jsontool.serialize($!{titleToDisplay}), 
    #if($checkChilds)
      #checkHasChild($document)
      "children": $hasChild,
    #else
      "children": true, 
    #end 
    "data": "${urlDoc}" ,
    "a_attr" : {"href":"${urlDoc}"}
    #if($pathToRootNode.size()&gt; 0 &amp;&amp; $pathToRootNode.contains($document))
      #getChilds($document)   
    #elseif("$document"=="$openNode")
      ,
       "state": {
        "opened" : true,
        "selected": true
        }          
    #end
  }
#end

#if("$!{request.id}"!="#")
  #set($parentId = "$!{request.id}")
  #set($parentId = $parentId.substring(2))
  #set($parentQuery = $services.query.xwql("select doc.fullName from XWikiDocument doc where doc.id = :parentId ").bindValue("parentId", $util.parseLong($parentId)).setLimit(1).execute())
  #set($parent = $parentQuery.get(0))
#else
  #set($parent = "#")
#end
#*
 get the parameters
*#
## the space to show hierarchy for
#set($space = "$!request.space")

## The Class to show hierarchy for
#set($xwikiclasses = "$!request.xwikiclass")
#if($xwikiclasses != '')
  #set($classFilter = " and doc.fullName = obj.name and obj.className = '$xwikiclasses'")
  #set($classFrom = ", BaseObject as obj")
#end

## the list of documents to show hierarchy for
#set($rootdocumentsList = [])
#set($rootdocuments = "$!request.rootdocuments")
#if($rootdocuments!="")
  #set($rootdocumentsListRaw = $rootdocuments.split(','))
  #foreach($rootdocumentElt in $rootdocumentsListRaw)
    #set($rootdocumentElt = $rootdocumentElt.trim())
    #if("$!rootdocumentElt" != "")
      #set($discard = $rootdocumentsList.add($rootdocumentElt))
    #end
  #end
#end

#if( $rootdocumentsList.size() &gt; 0 &amp;&amp; $space=="")
  #set($mode = "documents")
#elseif($rootdocumentsList.size() == 0 &amp;&amp; $space!="")
  #set($mode = "space")
#else
  #set($mode = "mixte")
#end

## get the node value (a document's full name) for which we want to display the path expanded from the root node to the specified node
## collapsing all the other branches

#set($openNode = "$!request.openNode")
#set($closeNode = "$!request.closeNode")

#set($closeNodeList = [])
#if("$!closeNode" != "")
  #set($closeNodeList = $closeNode.split(","))
#end

## and the value that should be displayed for each document
#set($displayValue = "$!request.displayvalue")

## whether rights should be checked when displaying the documents
#set($checkRight = false)
#if("$!request.checkright" == "true" || "$!request.checkright" == "yes")
  #set($checkRight = true)
#end


## specify if the tree should be collapsed
#set($collapsed = "$!request.collapsed" == 'true' || "$!request.collapsed" == 'yes')
#set($opened = true)
#if($collapsed)
  #set($opened = false)
#end
## the list of documents to exclude, if any
#set($excludes = "$!request.excludes")
#set($excludesWhere = "")
#if($excludes != "")
  #set($excludesWhere = ' and doc.fullName not in ( :excludes )')
#end

## the list of documents to exclude, if any
#set($excludeListString = "$!request.excludes")
#set($excludeListRaw = $excludeListString.split(','))
## clean a bit the list, remove empty strings and trim
#set($excludeList = [])
#foreach($excludedElt in $excludeListRaw)
  #set($excludedElt = $excludedElt.trim())
  #if("$!excludedElt" != "")
    #set($discard = $excludeList.add($excludedElt))
  #end
#end

#if($excludeList.size() &gt; 0)
  #set($excludesWhere = " and doc.fullName not in (")
  #foreach($excluded in $excludeList)
    #if($velocityCount &gt; 1)
      #set($excludesWhere = $excludesWhere + ', ') 
    #end
    #set($excludesWhere = $excludesWhere + " :exclude${velocityCount} ")
  #end
  #set($excludesWhere = $excludesWhere + ')')
#end


#set($docLanguage = "$!request.documentLanguage")
#set($docLanguageWhere = "")
#if($docLanguage != '')
  #if($docLanguage == $xwiki.getXWikiPreference('default_language'))
    #set($docLanguageWhere = "and (doc.language = :language OR doc.language='') ")
  #else
    #set($docLanguageWhere = "and doc.language = :language ")
  #end
#end



## specify if the tree should display hidden documents
#set($showHidden = "$!request.showHidden" == 'true' || "$!request.showHidden" == 'yes')

## check showHidden
#if($showHidden)
  #set($queryHidden = "")
#else
  #set($queryHidden = " and doc.hidden&lt;&gt;'1' ")
#end

## specify if the tree should check existence of child node
#set($checkChilds = "$!request.checkChilds" == 'true' || "$!request.checkChilds" == 'yes')

## we need to recursively get all the ancestors of the specified node @$openNode
#set($pathToRootNode = [])
## #set($childsJson ="")

#if(!$openNode.isEmpty() &amp;&amp; $xwiki.exists($openNode))
  #macro(getPathToRoot $document)
    #set($documentParent = $document.getParent())
    #if(!$checkRight || $xwiki.hasAccessLevel('view', $xcontext.user, $documentParent))
      #if(!$documentParent.equals(''))
        #set($discard = $pathToRootNode.add($documentParent))   
        #getPathToRoot($xwiki.getDocument($documentParent))
      #end
    #elseif(!$xwiki.hasAccessLevel('view', $xcontext.user, $documentParent))
      ## if current user don't have access level to view one of parent  don't display openNode 
      #set($pathToRootNode = [])
    #end
  #end
  #if( !$checkRight || $xwiki.hasAccessLevel('view', $xcontext.user, $openNode) )
    #getPathToRoot($xwiki.getDocument($openNode))
  #else
    #set($openNode = "" )
  #end
  
#end

[
#if($parent=="#" &amp;&amp; $mode=="documents")
  #foreach($root in $rootdocumentsList)
    #if( !$checkRight || $xwiki.hasAccessLevel('view', $xcontext.user, $root) )
      #displayNode($root)
    #end  
  #end
#elseif($parent=="#" &amp;&amp; $mode=="space")
  #getResults("root", $space)
  #set($titleToDisplay = "")
  #set($currDocReference = $services.model.resolveDocument("${space}.WebHome"))
  #set($currDoc = $xwiki.getDocument($currDocReference))
  #getTitleToDisplay($currDoc)
  #set($urlDoc = "$currDoc.getURL('view')")
  {
    "id": "id$!{currDoc.id}",
    "text": "$!{titleToDisplay}", 
    "children": true, 
    "data": "$!{urlDoc}" ,
    "a_attr" : {"href":"${urlDoc}"},
    "state": { "opened" : $opened },
    "children": [
    #foreach($name in $results)
      #if( !$checkRight || $xwiki.hasAccessLevel('view', $xcontext.user, $name) )
        #displayNode($name)
      #end
    #end
    ]
  }
#elseif($xwiki.exists($parent))
  #getResults("child" ,$parent)
  #foreach($name in $results)
    #if( !$checkRight || $xwiki.hasAccessLevel('view', $xcontext.user, $name) )
      #displayNode($name)
    #end
  #end
#end
]
{{/html}}
{{/velocity}}</content>
</xwikidoc>
